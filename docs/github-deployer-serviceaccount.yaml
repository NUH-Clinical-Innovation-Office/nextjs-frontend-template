# GitHub Deployer Service Account
# This service account provides least-privilege access for GitHub Actions to deploy applications
# to your Kubernetes cluster with full audit logging capabilities.
#
# Benefits:
# - Audit trail: All actions are logged with service account identity
# - Least privilege: Only necessary permissions granted
# - Security: No direct use of admin kubeconfig
# - Compliance: Meets security best practices for CI/CD
#
# Apply this configuration:
#   kubectl apply -f github-deployer-serviceaccount.yaml
#
# Generate kubeconfig for GitHub Actions:
#   See instructions in CLOUDFLARE_GITHUB_SETUP.md

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: github-deployer
  namespace: default
  labels:
    app.kubernetes.io/name: github-deployer
    app.kubernetes.io/component: ci-cd
    app.kubernetes.io/managed-by: manual

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: github-deployer
  labels:
    app.kubernetes.io/name: github-deployer
    app.kubernetes.io/component: ci-cd
rules:
  # Namespace Management
  # Required for creating isolated namespaces per feature branch
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # Deployment Management
  # Required for deploying and managing application workloads
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets", "statefulsets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # Service Management
  # Required for creating NodePort services for Cloudflare tunnel routing
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # ConfigMap Management
  # Required for:
  # - Port allocation tracking (feature-branch-port-mappings)
  # - Application configuration
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # Secret Management
  # Required for:
  # - Image pull secrets (Docker registry authentication)
  # - Application secrets (database credentials, API keys)
  # Note: Secrets are audited in Kubernetes API server logs
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # Pod Read Access
  # Required for:
  # - Checking deployment status
  # - Reading logs for debugging
  # - Health check verification
  # Note: No delete permission for safety
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "watch"]

  # Ingress Management
  # Required if using Kubernetes Ingress instead of Cloudflare Tunnel
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # HorizontalPodAutoscaler Management
  # Required for autoscaling configurations
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # ServiceAccount Management (within namespaces)
  # Required for creating service accounts in feature branch namespaces
  # Note: Does NOT allow creating ClusterRoleBindings (privilege escalation prevention)
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

  # PersistentVolumeClaim Management (Optional)
  # Uncomment if your application uses persistent storage
  # - apiGroups: [""]
  #   resources: ["persistentvolumeclaims"]
  #   verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # Events Read Access (for debugging)
  # Allows reading Kubernetes events for troubleshooting
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: github-deployer
  labels:
    app.kubernetes.io/name: github-deployer
    app.kubernetes.io/component: ci-cd
subjects:
  - kind: ServiceAccount
    name: github-deployer
    namespace: default
roleRef:
  kind: ClusterRole
  name: github-deployer
  apiGroup: rbac.authorization.k8s.io

---
# Token Secret (for Kubernetes 1.24+)
# Kubernetes 1.24+ doesn't auto-generate secrets for service accounts
# This creates a long-lived token for GitHub Actions authentication
apiVersion: v1
kind: Secret
metadata:
  name: github-deployer-token
  namespace: default
  labels:
    app.kubernetes.io/name: github-deployer
    app.kubernetes.io/component: ci-cd
  annotations:
    kubernetes.io/service-account.name: github-deployer
type: kubernetes.io/service-account-token

---
# AUDIT LOGGING CONFIGURATION
#
# Kubernetes automatically logs all API requests to the audit log when enabled.
# The service account identity is captured in every log entry.
#
# To enable audit logging on your K3s cluster:
#
# 1. Create audit policy file: /etc/kubernetes/audit-policy.yaml
#
# apiVersion: audit.k8s.io/v1
# kind: Policy
# rules:
#   # Log all requests from github-deployer service account
#   - level: RequestResponse
#     users: ["system:serviceaccount:default:github-deployer"]
#     omitStages: ["RequestReceived"]
#
#   # Log metadata for other service accounts
#   - level: Metadata
#     userGroups: ["system:serviceaccounts"]
#     omitStages: ["RequestReceived"]
#
#   # Log all Secret operations (create, update, delete, patch)
#   - level: RequestResponse
#     resources:
#       - group: ""
#         resources: ["secrets"]
#     verbs: ["create", "update", "delete", "patch"]
#
#   # Log ConfigMap modifications
#   - level: Metadata
#     resources:
#       - group: ""
#         resources: ["configmaps"]
#     verbs: ["create", "update", "delete", "patch"]
#
#   # Log namespace changes
#   - level: Metadata
#     resources:
#       - group: ""
#         resources: ["namespaces"]
#     verbs: ["create", "update", "delete", "patch"]
#
#   # Don't log read-only requests at RequestResponse level
#   - level: None
#     verbs: ["get", "list", "watch"]
#
# 2. Configure K3s API server with audit logging:
#
# Edit /etc/systemd/system/k3s.service or /etc/rancher/k3s/config.yaml:
#
# kube-apiserver-arg:
#   - "audit-policy-file=/etc/kubernetes/audit-policy.yaml"
#   - "audit-log-path=/var/log/kubernetes/audit.log"
#   - "audit-log-maxage=30"
#   - "audit-log-maxbackup=10"
#   - "audit-log-maxsize=100"
#
# 3. Restart K3s:
#    sudo systemctl restart k3s
#
# 4. Verify audit logs:
#    tail -f /var/log/kubernetes/audit.log | grep github-deployer
#
# Audit Log Fields:
# - user: "system:serviceaccount:default:github-deployer"
# - verb: create, update, delete, patch, get, list, watch
# - objectRef.resource: deployments, services, secrets, etc.
# - objectRef.namespace: Target namespace
# - requestURI: API endpoint called
# - responseStatus.code: HTTP status code
# - timestamp: When the action occurred
#
# For more information:
# https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/
